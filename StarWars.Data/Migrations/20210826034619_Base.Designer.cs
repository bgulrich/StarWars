// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarWars.Data;

namespace StarWars.Data.Migrations
{
    [DbContext(typeof(StarWarsDbContext))]
    [Migration("20210826034619_Base")]
    partial class Base
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18");

            modelBuilder.Entity("StarWars.Data.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthYear")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("EyeColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("HairColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HomeWorldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("SkinColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HomeWorldId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterPlanet", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "PlanetId");

                    b.HasIndex("PlanetId");

                    b.ToTable("CharacterPlanet");
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterSpecies", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("CharacterSpecies");
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterStarship", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarshipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "StarshipId");

                    b.HasIndex("StarshipId");

                    b.ToTable("CharacterStarship");
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterVehicle", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterVehicle");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpeningCrawl")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Producer")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmCharacter", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("FilmCharacter");
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmPlanet", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmId", "PlanetId");

                    b.HasIndex("PlanetId");

                    b.ToTable("FilmPlanet");
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmSpecies", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("FilmSpecies");
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmStarship", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarshipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmId", "StarshipId");

                    b.HasIndex("StarshipId");

                    b.ToTable("FilmStarship");
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmVehicle", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FilmVehicle");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Climate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diameter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gravity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OribitalPeriod")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Population")
                        .HasColumnType("TEXT");

                    b.Property<string>("RotationPeriod")
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceWater")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terrain")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AverageHeight")
                        .HasColumnType("TEXT");

                    b.Property<string>("AverageLifespan")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("EyeColors")
                        .HasColumnType("TEXT");

                    b.Property<string>("HairColors")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HomeWorldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("SkinColors")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HomeWorldId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Starship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CargoCapacity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Consumables")
                        .HasColumnType("TEXT");

                    b.Property<string>("CostInCredits")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Crew")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperdriveRating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumAtmosphericSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mglt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Passengers")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("StarshipClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Starships");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CargoCapacity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Consumables")
                        .HasColumnType("TEXT");

                    b.Property<string>("CostInCredits")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Crew")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaximumAtmosphericSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Passengers")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleClass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("StarWars.Data.Entities.Character", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Planet", "HomeWorld")
                        .WithMany()
                        .HasForeignKey("HomeWorldId");
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterPlanet", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Planet", "Planet")
                        .WithMany("CharacterPlanets")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterSpecies", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Character", "Character")
                        .WithMany("CharacterSpecies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Species", "Species")
                        .WithMany("CharacterSpecies")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterStarship", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Character", "Character")
                        .WithMany("CharacterStarships")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Starship", "Starship")
                        .WithMany("CharacterStarships")
                        .HasForeignKey("StarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.CharacterVehicle", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Character", "Character")
                        .WithMany("CharacterVehicles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("CharacterVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmCharacter", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Character", "Character")
                        .WithMany("FilmCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Film", "Film")
                        .WithMany("FilmCharacters")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmPlanet", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Film", "Film")
                        .WithMany("FilmPlanets")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Planet", "Planet")
                        .WithMany("FilmPlanets")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmSpecies", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Film", "Film")
                        .WithMany("FilmSpecies")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Species", "Species")
                        .WithMany("FilmSpecies")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmStarship", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Film", "Film")
                        .WithMany("FilmStarships")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Starship", "Starship")
                        .WithMany("FilmStarships")
                        .HasForeignKey("StarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.FilmVehicle", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Film", "Film")
                        .WithMany("FilmVehicles")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWars.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("FilmVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWars.Data.Entities.Species", b =>
                {
                    b.HasOne("StarWars.Data.Entities.Planet", "HomeWorld")
                        .WithMany()
                        .HasForeignKey("HomeWorldId");
                });
#pragma warning restore 612, 618
        }
    }
}
